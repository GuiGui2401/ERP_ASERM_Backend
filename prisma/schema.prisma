generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model product {
  id                           Int                            @id @default(autoincrement())
  name                         String                         @unique
  quantity                     Int
  purchase_price               Float
  sale_price                   Float
  imageName                    String?
  idSupplier                   Int
  product_category_id          Int?
  unit_measurement             Float?
  unit_type                    String?
  sku                          String?                        @unique
  reorder_quantity             Int?
  status                       Boolean                        @default(true)
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime                       @updatedAt
  collisage                    Int
  marge                        Float
  gencode                      String?
  marque                       String?
  depense                      Float
  supplier                     supplier                       @relation(fields: [idSupplier], references: [id])
  product_category             product_category?              @relation(fields: [product_category_id], references: [id])
  purchaseInvoiceProduct       purchaseInvoiceProduct[]
  returnPurchaseInvoiceProduct returnPurchaseInvoiceProduct[]
  returnSaleInvoiceProduct     returnSaleInvoiceProduct[]
  saleInvoiceProduct           saleInvoiceProduct[]
  salePromiseProduct           salePromiseProduct[]
}

model product_category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   product[]
}

model supplier {
  id              Int               @id @default(autoincrement())
  name            String
  phone           String            @unique
  address         String
  status          Boolean           @default(true)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  product         product[]
  purchaseInvoice purchaseInvoice[]
}

model purchaseInvoice {
  id                     Int                      @id @default(autoincrement())
  date                   DateTime
  total_amount           Float
  discount               Float
  paid_amount            Float
  due_amount             Float
  supplier_id            Int
  note                   String?
  supplier_memo_no       String?
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  supplier               supplier                 @relation(fields: [supplier_id], references: [id], onDelete: Cascade)
  purchaseInvoiceProduct purchaseInvoiceProduct[]
  returnPurchaseInvoice  returnPurchaseInvoice[]
}

model purchaseInvoiceProduct {
  id                     Int             @id @default(autoincrement())
  product_id             Int
  invoice_id             Int
  product_quantity       Int
  product_purchase_price Float
  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt
  invoice                purchaseInvoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  product                product         @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model customer {
  id            Int           @id @default(autoincrement())
  name          String
  phone         String        @unique
  ville         String        @default("")
  quartier      String        @default("")
  nameresponsable String      @default("")
  email         String        @default("")
  website       String        @default("")
  rue           String        @default("")
  status        Boolean       @default(true)
  type_customer typCat
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  saleInvoice   saleInvoice[]
}

model Reporting {
  id                  Int      @id @default(autoincrement())
  prospectName       String
  date                DateTime
  degree              String?
  rdvObject          String
  nextRdv            DateTime
  time               String
  contact            String
  pharmacoVigilance  String
  latitude           Float
  longitude          Float
  filePath           String?   // Nouveau champ pour stocker le chemin du fichier
  createdAt          DateTime  @default(now())
}

model user {
  id                 Int                  @id @default(autoincrement())
  firstName          String?
  lastName           String?
  userName           String               @unique
  password           String
  email              String?              @unique
  phone              String?              @unique
  street             String?
  city               String?
  state              String?
  zipCode            String?
  country            String?
  joinDate           DateTime?
  leaveDate          DateTime?
  employeeId         String?              @unique
  bloodGroup         String?
  image              String?
  employmentStatusId Int?
  departmentId       Int?
  roleId             Int?
  shiftId            Int?
  leavePolicyId      Int?
  weeklyHolidayId    Int?
  status             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  attendance         attendance[]
  awardHistory       awardHistory[]
  designationHistory designationHistory[]
  educations         education[]
  leaveApplication   leaveApplication[]
  payslip            payslip[]
  project            project[]
  projectTeamMember  projectTeamMember[]
  salaryHistory      salaryHistory[]
  saleInvoice        saleInvoice[]
  salePromise        salePromise []
  department         department?          @relation(fields: [departmentId], references: [id])
  employmentStatus   employmentStatus?    @relation(fields: [employmentStatusId], references: [id])
  leavePolicy        leavePolicy?         @relation(fields: [leavePolicyId], references: [id])
  role               role?                @relation(fields: [roleId], references: [id])
  shift              shift?               @relation(fields: [shiftId], references: [id])
  weeklyHoliday      weeklyHoliday?       @relation(fields: [weeklyHolidayId], references: [id])

  AuditLog AuditLog[]
}

model saleInvoice {
  id                 Int                  @id @default(autoincrement())
  date               DateTime
  total_amount       Float
  discount           Float
  paid_amount        Float
  due_amount         Float
  profit             Float
  customer_id        Int
  user_id            Int
  note               String?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  returnSaleInvoice  returnSaleInvoice[]
  customer           customer             @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  user               user                 @relation(fields: [user_id], references: [id])
  saleInvoiceProduct saleInvoiceProduct[]
}

model saleInvoiceProduct {
  id                 Int         @id @default(autoincrement())
  product_id         Int
  invoice_id         Int
  product_quantity   Int
  product_sale_price Float
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt
  invoice            saleInvoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  product            product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model returnPurchaseInvoice {
  id                           Int                            @id @default(autoincrement())
  date                         DateTime
  total_amount                 Float
  note                         String?
  purchaseInvoice_id           Int
  status                       Boolean                        @default(true)
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime                       @updatedAt
  purchaseInvoice              purchaseInvoice                @relation(fields: [purchaseInvoice_id], references: [id], onDelete: Cascade)
  returnPurchaseInvoiceProduct returnPurchaseInvoiceProduct[]
}

model returnPurchaseInvoiceProduct {
  id                     Int                   @id @default(autoincrement())
  product_id             Int
  invoice_id             Int
  product_quantity       Int
  product_purchase_price Float
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  invoice                returnPurchaseInvoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  product                product               @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model returnSaleInvoice {
  id                       Int                        @id @default(autoincrement())
  date                     DateTime
  total_amount             Float
  note                     String?
  saleInvoice_id           Int
  status                   Boolean                    @default(true)
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  saleInvoice              saleInvoice                @relation(fields: [saleInvoice_id], references: [id], onDelete: Cascade)
  returnSaleInvoiceProduct returnSaleInvoiceProduct[]
}

model returnSaleInvoiceProduct {
  id                 Int               @id @default(autoincrement())
  product_id         Int
  invoice_id         Int
  product_quantity   Int
  product_sale_price Float
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  invoice            returnSaleInvoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  product            product           @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model salePromise {
  id                 Int                  @id @default(autoincrement())
  date               DateTime
  dueDate            DateTime?            // Nouvelle colonne pour la date d'échéance
  reminderDate       DateTime?            // Nouvelle colonne pour la date de rappel
  companyName        String?              // Nouvelle colonne pour le nom de l'entreprise
  customer_address   String? // Nouveau champ pour l'adresse
  total_amount       Float
  discount           Float
  customer_name      String               // Nouveau champ pour nom du client non enregistré
  customer_phone     String               // Nouveau champ pour téléphone du client non enregistré
  customer_id        Int?                 // Champ optionnel si c'est un client enregistré
  user_id            Int
  note               String?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  
  user               user                 @relation(fields: [user_id], references: [id])
  salePromiseProduct salePromiseProduct[]
}

model salePromiseProduct {
  id                 Int                  @id @default(autoincrement())
  product_id         Int
  promise_id         Int
  product_quantity   Int
  product_sale_price Float
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  promise            salePromise          @relation(fields: [promise_id], references: [id], onDelete: Cascade)
  product            product              @relation(fields: [product_id], references: [id], onDelete: Cascade)
}


model education {
  id           Int       @id @default(autoincrement())
  userId       Int
  degree       String
  institution  String
  fieldOfStudy String
  result       String
  startDate    DateTime
  endDate      DateTime?
  status       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         user      @relation(fields: [userId], references: [id])
}

model salaryHistory {
  id        Int       @id @default(autoincrement())
  userId    Int
  salary    Float
  startDate String
  endDate   DateTime?
  comment   String?
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      user      @relation(fields: [userId], references: [id])
}

model designation {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  status             Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  designationHistory designationHistory[]
}

model department {
  id     Int     @id @default(autoincrement())
  name   String
  status Boolean @default(true)
  user   user[]
}

model employmentStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  colourValue String
  description String?
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        user[]
}

model designationHistory {
  id            Int         @id @default(autoincrement())
  userId        Int
  designationId Int
  startDate     DateTime
  endDate       DateTime?
  comment       String?
  designation   designation @relation(fields: [designationId], references: [id])
  user          user        @relation(fields: [userId], references: [id])
}

model shift {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  startTime DateTime @db.Time(6)
  endTime   DateTime @db.Time(6)
  workHour  Float
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user[]
}

model award {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String?
  image        String?
  status       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  awardHistory awardHistory[]
}

model awardHistory {
  id          Int      @id @default(autoincrement())
  userId      Int
  awardId     Int
  awardedDate DateTime
  comment     String?
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  award       award    @relation(fields: [awardId], references: [id])
  user        user     @relation(fields: [userId], references: [id])
}

model attendance {
  id            Int       @id @default(autoincrement())
  userId        Int
  inTime        DateTime
  outTime       DateTime?
  ip            String?
  comment       String?
  punchBy       Int?
  totalHour     Float?
  inTimeStatus  String?
  outTimeStatus String?
  status        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          user      @relation(fields: [userId], references: [id])
}

model leaveApplication {
  id              Int       @id @default(autoincrement())
  userId          Int
  leaveType       String
  leaveFrom       DateTime
  leaveTo         DateTime
  acceptLeaveFrom DateTime?
  acceptLeaveTo   DateTime?
  acceptLeaveBy   Int?
  leaveDuration   Int?
  reason          String?
  reviewComment   String?
  attachment      String?
  status          String    @default("PENDING")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            user      @relation(fields: [userId], references: [id])
}

model payslip {
  id                Int      @id @default(autoincrement())
  userId            Int
  salaryMonth       Int
  salaryYear        Int
  salary            Float
  paidLeave         Int
  unpaidLeave       Int
  monthlyHoliday    Int
  publicHoliday     Int
  workDay           Int
  shiftWiseWorkHour Float
  monthlyWorkHour   Float
  hourlySalary      Float
  workingHour       Float
  salaryPayable     Float
  bonus             Float
  bonusComment      String?
  deduction         Float
  deductionComment  String?
  totalPayable      Float
  paymentStatus     String   @default("UNPAID")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              user     @relation(fields: [userId], references: [id])

  @@unique([userId, salaryMonth, salaryYear])
}

model announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model leavePolicy {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  paidLeaveCount   Int
  unpaidLeaveCount Int
  status           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             user[]
}

model weeklyHoliday {
  id        Int      @id @default(autoincrement())
  name      String
  startDay  String
  endDay    String
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user[]
}

model publicHoliday {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model project {
  id               Int           @id @default(autoincrement())
  projectManagerId Int
  name             String
  startDate        DateTime
  endDate          DateTime
  description      String
  status           String        @default("PENDING")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  milestone        milestone[]
  projectManager   user          @relation(fields: [projectManagerId], references: [id])
  projectTeam      projectTeam[]
  task             task[]
  taskStatus       taskStatus[]
}

model milestone {
  id          Int      @id @default(autoincrement())
  projectId   Int
  name        String
  startDate   DateTime
  endDate     DateTime
  description String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        task[]
}

model task {
  id             Int            @id @default(autoincrement())
  projectId      Int
  milestoneId    Int?
  name           String
  startDate      DateTime
  endDate        DateTime
  completionTime Float?
  description    String
  priorityId     Int
  status         Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  taskStatusId   Int
  assignedTask   assignedTask[]
  milestone      milestone?     @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  priority       priority       @relation(fields: [priorityId], references: [id], onDelete: Cascade)
  project        project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskStatus     taskStatus     @relation(fields: [taskStatusId], references: [id], onDelete: Cascade)
}

model taskStatus {
  id        Int     @id @default(autoincrement())
  projectId Int
  name      String
  status    Boolean @default(true)
  task      task[]
  project   project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
}

model priority {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  status Boolean @default(true)
  task   task[]
}

model projectTeam {
  id                Int                 @id @default(autoincrement())
  projectTeamName   String
  projectId         Int
  status            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  assignedTask      assignedTask[]
  project           project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectTeamMember projectTeamMember[]
}

model projectTeamMember {
  id            Int         @id @default(autoincrement())
  projectTeamId Int
  userId        Int
  status        Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  projectTeam   projectTeam @relation(fields: [projectTeamId], references: [id], onDelete: Cascade)
  user          user        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model assignedTask {
  id            Int         @id @default(autoincrement())
  taskId        Int
  projectTeamId Int
  status        Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  projectTeam   projectTeam @relation(fields: [projectTeamId], references: [id], onDelete: Cascade)
  task          task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  status         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  rolePermission rolePermission[]
  user           user[]
}

model permission {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  rolePermission rolePermission[]
}

model rolePermission {
  id            Int        @id @default(autoincrement())
  role_id       Int
  permission_id Int
  status        Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
}

model account {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  type       String
  subAccount subAccount[]
}

model subAccount {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  account_id Int
  status     Boolean       @default(true)
  account    account       @relation(fields: [account_id], references: [id])
  credit     transaction[] @relation("credit")
  debit      transaction[] @relation("debit")
}

model transaction {
  id          Int        @id @default(autoincrement())
  date        DateTime
  debit_id    Int
  credit_id   Int
  particulars String
  amount      Float
  type        String?
  related_id  Int?
  status      Boolean    @default(true)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  credit      subAccount @relation("credit", fields: [credit_id], references: [id], onDelete: Cascade)
  debit       subAccount @relation("debit", fields: [debit_id], references: [id], onDelete: Cascade)
}

model appSetting {
  id           Int    @id @default(autoincrement())
  company_name String
  tag_line     String
  address      String
  phone        String
  email        String
  website      String
  footer       String
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  action     String
  entityId   Int?
  entityType String?
  timestamp  DateTime @default(now())
  details    String?

  user       user     @relation(fields: [userId], references: [id])
}


enum typCat {
  Pharmacie
  Distributeur
}
